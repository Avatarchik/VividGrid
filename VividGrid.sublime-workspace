{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"tar",
				"_targetScore	int"
			],
			[
				"Range",
				"Range(int min, int max)	int"
			],
			[
				"new",
				"newScale	float"
			],
			[
				"base",
				"baseScale	float"
			],
			[
				"time",
				"timePerUpdate	float"
			],
			[
				"Layer",
				"LayeredCamera	LayeredCamera"
			],
			[
				"_eer",
				"_energyRingHolder	GameObject"
			],
			[
				"Cie",
				"CeilToInt(float f)	int"
			],
			[
				"_energ",
				"_energyValue	float"
			],
			[
				"ener",
				"energyRequired	float"
			],
			[
				"energ",
				"energyRemaining	float"
			],
			[
				"energyR",
				"energyRequired	float"
			],
			[
				"jump",
				"jump_upTime	float"
			],
			[
				"Base",
				"BaseWhale	BaseWhale"
			],
			[
				"easeInOut",
				"easeInOutQuad	LeanTweenType"
			],
			[
				"rotate",
				"rotateZ(GameObject gameObject, float to, float time)	LTDescr"
			],
			[
				"Vector",
				"Vector3()	Vector3()"
			],
			[
				"scale",
				"scale(GameObject gameObject, Vector3 to, float time)	LTDescr"
			],
			[
				"Lean",
				"LeanTween	LeanTween"
			],
			[
				"audio",
				"audioFadeHelper(float val)	void"
			],
			[
				"vale",
				"value(GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)	LTDescr"
			],
			[
				"Dismiss",
				"DismissSettings()	void"
			],
			[
				"Canva",
				"CanvasGroup	CanvasGroup"
			],
			[
				"LeanTw",
				"LeanTween	LeanTween"
			],
			[
				"_settings",
				"_settingsPanel	SettingsPanel"
			],
			[
				"_UI",
				"_UIBar	Image"
			],
			[
				"TurnO",
				"TurnOnCenter()	void"
			],
			[
				"_ret",
				"_reticleCenter	SpriteRenderer"
			],
			[
				"vect",
				"Vector3	Vector3"
			],
			[
				"setEase",
				"setEase(LeanTweenType easeType)	LTDescr"
			],
			[
				"Ener",
				"EnergySegmentLight	EnergySegmentLight"
			],
			[
				"val",
				"value(GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)	LTDescr"
			],
			[
				"Prese",
				"PresentSelfCoroutine()	IEnumerator"
			],
			[
				"Sprite",
				"SpriteRenderer	SpriteRenderer"
			],
			[
				"Presnt",
				"PresentSettings()	void"
			],
			[
				"IEN",
				"IEnumerator	IEnumerator"
			],
			[
				"Ien",
				"IEnumerator	IEnumerator"
			],
			[
				"rot",
				"rotate(RectTransform rectTrans, float to, float time)	LTDescr"
			],
			[
				"easeoutC",
				"easeOutBack	LeanTweenType"
			],
			[
				"Le",
				"LeanTweenType	LeanTweenType"
			],
			[
				"easeInC",
				"easeInCubic	LeanTweenType"
			],
			[
				"Leant",
				"LeanTweenType	LeanTweenType"
			],
			[
				"move",
				"move(RectTransform rectTrans, Vector3 to, float time)	LTDescr"
			],
			[
				"GetComponent",
				"GetComponent<T>()	T"
			],
			[
				"selec",
				"selectedCharacter	CharacterName"
			],
			[
				"is",
				"isSwapping	bool"
			],
			[
				"play",
				"Play()	void"
			],
			[
				"Dismi",
				"DismissSkillSelection()	void"
			],
			[
				"Chara",
				"CharacterName	CharacterName"
			],
			[
				"sele",
				"selectedCharacter	CharacterName"
			],
			[
				"char",
				"charName	CharacterName"
			],
			[
				"sel",
				"selectedCharacter	CharacterName"
			],
			[
				"cha",
				"charName	CharacterName"
			],
			[
				"Spri",
				"SpriteRenderer	SpriteRenderer"
			],
			[
				"c",
				"case	case"
			],
			[
				"_jum",
				"_jumpUp	AudioSource"
			],
			[
				"tier",
				"tierText	string"
			],
			[
				"ski",
				"skillTier	int"
			],
			[
				"deb",
				"DEBUG	bool"
			],
			[
				"Get",
				"GetInt(string key, int defaultValue)	int"
			],
			[
				"UI",
				"UnityEngine	UnityEngine"
			],
			[
				"Present",
				"PresentNewTierScreen(int tier)	void"
			],
			[
				"Player",
				"PlayerPrefs	PlayerPrefs"
			],
			[
				"Load",
				"LoadLevel(int index)	void"
			],
			[
				"alp",
				"CrossFadeAlpha(float alpha, float duration, bool ignoreTimeScale)	void"
			],
			[
				"IEnu",
				"IEnumerator	IEnumerator"
			],
			[
				"Start",
				"StartCoroutine(IEnumerator routine)	Coroutine"
			],
			[
				"shae",
				"shakeMagnitude	float"
			],
			[
				"_",
				"_particleID	int"
			],
			[
				"Energy",
				"EnergyParticle	EnergyParticle"
			],
			[
				"loc",
				"localPosition	Vector3 { get; set; }"
			],
			[
				"po",
				"position	Vector2"
			],
			[
				"coll",
				"collectMod	float"
			],
			[
				"_target",
				"_targetScale	Vector3"
			],
			[
				"Vec",
				"Vector3	Vector3"
			],
			[
				"local",
				"localPosition	Vector3 { get; set; }"
			],
			[
				"_tar",
				"_targetScale	Vector3"
			],
			[
				"Vect",
				"Vector3	Vector3"
			],
			[
				"l",
				"Lerp(Vector3 from, Vector3 to, float t)	Vector3"
			],
			[
				"Energ",
				"EnergyParticleState	EnergyParticleState"
			],
			[
				"col",
				"color	Color { get; set; }"
			],
			[
				"retic",
				"_reticleBar	Image"
			],
			[
				"Uin",
				"UnityEngine	UnityEngine"
			],
			[
				"co",
				"color	Color { get; set; }"
			],
			[
				"R",
				"Range(int min, int max)	int"
			],
			[
				"layout",
				"layoutDataPool	WhaleNodeLayoutData[]"
			],
			[
				"Clamp",
				"Clamp(float value, float min, float max)	float"
			],
			[
				"v",
				"void	void"
			],
			[
				"ac",
				"activateParticle(object particle)	void"
			],
			[
				"setOnComple",
				"setOnComplete(Action<object> onComplete, object onCompleteParam)	LTDescr"
			],
			[
				"setOn",
				"setOnComplete(Action<object> onComplete)	LTDescr"
			],
			[
				"re",
				"RemoveMyslef()	void"
			],
			[
				"cancel",
				"cancel(GameObject gameObject)	void"
			],
			[
				"moveY",
				"moveLocalY(GameObject gameObject, float to, float time)	LTDescr"
			],
			[
				"sor",
				"sortingOrder	int { get; set; }"
			],
			[
				"loca",
				"localPosition	Vector3 { get; set; }"
			],
			[
				"V",
				"HasValue	bool { get; }"
			],
			[
				"Create",
				"CreateEnergyBurst(Vector2 position, int numParticles, int layerID, int layerOrder)	void"
			],
			[
				"cur",
				"currentTouchWorld()	Vector2?"
			],
			[
				"lay",
				"layerOrder	int"
			],
			[
				"sortin",
				"sortingLayerID	int { get; set; }"
			],
			[
				"camer",
				"cameraMovementBoundsPos	float"
			],
			[
				"ro",
				"restingAnchor	Transform"
			],
			[
				"canc",
				"cancel(GameObject gameObject)	void"
			],
			[
				"for",
				"foreach	foreach"
			],
			[
				"easout",
				"easeOutBounce	LeanTweenType"
			],
			[
				"Audio",
				"AudioSource	AudioSource"
			],
			[
				"pl",
				"Play()	void"
			],
			[
				"Ser",
				"SerializeField"
			],
			[
				"whale",
				"whalePrefab2	GameObject"
			],
			[
				"h",
				"highScore	int"
			],
			[
				"ty",
				"typeof	typeof"
			],
			[
				"Sa",
				"SetInt(string key, int value)	void"
			],
			[
				"Pla",
				"PlayerPrefs	PlayerPrefs"
			],
			[
				"overr",
				"overruled"
			],
			[
				"Lew",
				"LeanTweenType	LeanTweenType"
			],
			[
				"IEn",
				"IEnumerator	IEnumerator"
			],
			[
				"WhaleSp",
				"WhaleSpawnManager	WhaleSpawnManager"
			],
			[
				"_ski",
				"_skill2	EquippedSkill"
			],
			[
				"_is",
				"_isSelected	bool"
			],
			[
				"Gr",
				"green	Color { get; }"
			],
			[
				"Equp",
				"EquippedSkill	EquippedSkill"
			],
			[
				"Skill",
				"SkillData	SkillData"
			],
			[
				"S",
				"System	System"
			],
			[
				"Custom",
				"CustomAssetUtility	CustomAssetUtility"
			],
			[
				"Crea",
				"CreateAsset"
			],
			[
				"Ki",
				"kioskModeEnabled	bool"
			],
			[
				"delta",
				"deltaTime	float { get; }"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "using UnityEngine;\nusing System.Collections.Generic;\nusing System.IO;\nusing System;\n\npublic class GridLine {\n\n	public enum Type {\n		Column = 0,\n		Row\n	}\n\n	// private int _index;\n	// private Type _type;\n\n	private readonly List<int> _turretIDs = new List<int>();\n\n	public void SetUpLine(int i, Type type) {\n		// _index = i;\n		// _type = type;\n	}\n\n	public void AddNewTurret (int turretID) {\n		_turretIDs.Add(turretID);\n	}\n\n	public int[] GetTurretIDs () {\n		return _turretIDs.ToArray();\n	}\n}\n\n[RequireComponent(typeof(VisualGrid))]\npublic class PuzzleGrid : MonoBehaviour {\n\n	public int _numColumns = 7;\n	public int _numRows = 13;\n\n	public int _levelID;\n\n	private bool _isRotating;\n\n	private GridLine[] columns;\n	private GridLine[] rows;\n	private Turret[] turrets;\n\n	private int[] spawnerTurretIDs;\n	private int[] receiverTurretIDs;\n	private List<int> resolvingTurretIDs;\n\n	private VisualGrid _visual;\n\n\n	// Use this for initialization\n	public void Start () {\n\n		// initialize grid lines\n		columns = new GridLine[_numColumns];\n		rows = new GridLine[_numRows];\n\n		for (int i = 1; i < _numColumns+1; i++) {\n			var col = new GridLine();\n			col.SetUpLine(i, GridLine.Type.Column);\n			columns[i-1] = col;\n		}\n\n		for (int i = 1; i < _numRows+1; i++) {\n			var row = new GridLine();\n			row.SetUpLine(i, GridLine.Type.Row);\n			rows[i-1] = row;\n		}\n\n		// initialize properties\n		resolvingTurretIDs = new List<int>();\n\n		// set up the visual grid\n		_visual = GetComponent<VisualGrid>();\n		_visual.SetUpGrid();\n		_visual.SetUpButtons();\n\n		LoadLayout();\n	}\n\n	public void ActivateColumn ( int i ) {\n		Debug.Log(\"Column Rotated at Index \" + i);\n		ActivateGridLine(GridLine.Type.Column, i);\n	}\n\n	public void ActivateRow ( int i ) {\n		Debug.Log(\"Row Rotated at Index \" + i);\n		ActivateGridLine(GridLine.Type.Row, i);\n	}\n\n	public void ActivateGridLine ( GridLine.Type type, int index ) {\n\n		// get turret IDs\n		var turretIDs = new int[0];\n		switch (type)\n		{\n			case GridLine.Type.Column:\n				turretIDs = columns[index-1].GetTurretIDs();\n				break;\n\n			case GridLine.Type.Row:\n				turretIDs = rows[index-1].GetTurretIDs();\n				break;\n		}\n\n		// tell turrets to rotate\n		foreach (int id in turretIDs) {\n			resolvingTurretIDs.Add(id);\n			turrets[id].Rotate();\n		}\n\n		_isRotating = true;\n		_visual.DisableRotation();\n	}\n\n	public void ResolveRotation ( int id ) {\n\n		// remove \n		if ( !resolvingTurretIDs.Remove( id ) ) {\n			Debug.Log(\"Tried to resolve rotation that doesn't exist!\");\n		}\n\n		// if all rotations are resolved update\n		if ( resolvingTurretIDs.Count == 0 ) {\n\n			Debug.Log(\"Resolving rotation...\");\n\n			// resolve new beam path\n			SendUpdatePulse();\n\n			// reenable rotations\n			_isRotating = false;\n			_visual.EnableRotation();\n		}\n	}\n\n	public void LoadLayout () {\n\n		// get ready to load file\n		var turretCommands = new List<string>();\n		var filepath = Application.dataPath + \"/Data/Levels/level\" + _levelID + \".vgl\";\n\n		// load file into strings\n		var reader = new  StreamReader(filepath);\n        try {\n            do {\n                turretCommands.Add(reader.ReadLine());\n            } while(reader.Peek() != -1);\n        } catch {\n            Debug.Log(\"Level File is empty\");\n        } finally {\n            reader.Close();\n        }\n\n        // \n        int numTurrets = turretCommands.Count;\n        turrets = new Turret[numTurrets];\n\n        // prime visuals\n        _visual.PrimeTurretArray(numTurrets);\n\n        // extract turret info and create them\n        int turretID = 0;\n        char[] delimiters = {','};\n        var spawners  = new List<int>();\n        var receviers = new List<int>();\n\n        foreach (string command in turretCommands) {\n\n        	string[] commands = command.Split(delimiters);\n\n        	int col = int.Parse(commands[0]);\n        	int row = int.Parse(commands[1]);\n        	var type = (Turret.Type) Enum.Parse(typeof(Turret.Type), commands[2]);\n        	var rotation = (Turret.Rotation) Enum.Parse(typeof(Turret.Rotation), commands[3]);\n        	var layout = (Turret.Layout) Enum.Parse(typeof(Turret.Layout), commands[4]);\n        	var direction = (Turret.Direction) Enum.Parse(typeof(Turret.Direction), commands[5]);\n\n        	if ( type == Turret.Type.Spawner ) {\n        		spawners.Add(turretID);\n        	} else if ( type == Turret.Type.Receiver ) {\n        		receviers.Add(turretID);\n        	}\n\n        	createTurret(turretID, col, row, type, rotation, layout, direction);\n        	turretID++;\n        }\n\n        // save spawner turrets\n        spawnerTurretIDs = new int[spawners.Count];\n        spawnerTurretIDs = spawners.ToArray();\n\n        receiverTurretIDs = new int[receviers.Count];\n        receiverTurretIDs = receviers.ToArray();\n\n		layoutTurrets();\n	}\n\n	public void InitializeBeam () {\n\n		foreach (int id in spawnerTurretIDs) {\n			turrets[id].PowerOn();\n		}\n	}\n\n	public void SendUpdatePulse () {\n\n		// make each spawner pulse\n		foreach (int id in spawnerTurretIDs) {\n			turrets[id].SendUpdatePulse();\n		}\n\n		// check if all receivers are on\n		foreach (int id in receiverTurretIDs) { \n			if ( turrets[id]._status == Turret.Status.PoweredOff ) {\n				return;\n			}\n		}\n\n		levelComplete ();\n	}\n\n	public Turret NextTurret ( int id, int col, int row, Turret.Direction direction ) {\n\n		switch (direction)\n		{\n		case Turret.Direction.Up:\n			for ( int i = row-1; i >= 1; i-- ) {\n				var nextID = getTurretID(col, i);\n				if ( nextID.HasValue ) {\n					return turrets[nextID.Value];\n				}\n			}\n			break;\n\n		case Turret.Direction.Down:\n			for ( int i = row+1; i <= _numRows; i++ ) {\n				var nextID = getTurretID(col, i);\n				if ( nextID.HasValue ) {\n					return turrets[nextID.Value];\n				}\n			}\n			break;\n\n		case Turret.Direction.Left:\n			for ( int i = col-1; i >= 1; i-- ) {\n				var nextID = getTurretID(i, row);\n				if ( nextID.HasValue ) {\n					return turrets[nextID.Value];\n				}\n			}\n			break;\n\n		case Turret.Direction.Right:\n			for ( int i = col+1; i <= _numColumns; i++ ) {\n				var nextID = getTurretID(i, row);\n				if ( nextID.HasValue ) {\n					return turrets[nextID.Value];\n				}\n			}\n			break;\n		}\n		return null;\n	}\n\n	public void ResetGrid () {\n\n		Debug.Log(\"Resetting Grid\");\n		foreach (Turret turret in turrets) {\n			resolvingTurretIDs.Add(turret._id);\n			turret.Reset();\n		}\n	}\n\n	// private functions\n	private void levelComplete () {\n\n		Debug.Log(\"Level Complete\");\n	}\n\n	private void layoutTurrets () {\n		foreach (Turret t in turrets) {\n			var r = t._row;\n			var c = t._col;\n			var v = t.GetComponent<VisualTurret>();\n			var pos = _visual.GetPositionFor(c, r);\n			v.SetPosition(pos);\n		}\n\n		InitializeBeam();\n	}\n\n	private void createTurret ( int turretID, int col, int row, Turret.Type type, Turret.Rotation rotation, Turret.Layout layout, Turret.Direction initialDirection ) {\n		\n		// create a turret, initilize it, and save it\n		var turretObject = _visual.CreateTurret(turretID);\n\n		var turret = turretObject.GetComponent<Turret>();\n		turret.Initialize(turretID, col, row, this, type, rotation, layout, initialDirection);\n		turrets[turretID] = turret;\n		\n		// let the rows/cols know about it\n		columns[col-1].AddNewTurret(turretID);\n		rows[row-1].AddNewTurret(turretID);\n	}\n\n	private int? getTurretID ( int col, int row ) {\n		var column = columns[col-1];\n		var ids = column.GetTurretIDs();\n		foreach (int id in ids) {\n			var turret = turrets[id];\n			if (turret._row == row) {\n				return id;\n			}\n		}\n		return null;\n	}\n}\n",
			"file": "Assets/Scripts/Puzzle Logic/PuzzleGrid.cs",
			"file_size": 7371,
			"file_write_time": 130789516320000000,
			"settings":
			{
				"buffer_size": 7368,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 107.0,
		"last_filter": "insta",
		"selected_items":
		[
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"show s",
				"OmniSharpSublime: Show Server Output"
			],
			[
				"ena",
				"Package Control: Enable Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"upd",
				"Package Control: Upgrade Package"
			],
			[
				"package ins",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 51.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/jak/Documents/Unity/Vivid Grid",
		"/Users/jak/Documents/Unity/Vivid Grid/Assets",
		"/Users/jak/Documents/Unity/Vivid Grid/Assets/Scripts",
		"/Users/jak/Documents/Unity/Vivid Grid/Assets/Scripts/Puzzle Logic"
	],
	"file_history":
	[
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Entity Scripts/Whales/WhaleNodeLayout.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Entity Scripts/Whales/LockNode.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Scoring/ScoreManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/PersistentData.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/UpgradeManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/SkillInterpreter.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Entity Scripts/Whales/KillNode.cs",
		"/Users/jak/Documents/SVN/fa11egd10005-c2-t6/Branches/Rotation Puzzle/Assets/MyScripts/Mechanism scripts/AnimateBeam.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/LighthouseUIManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Orientation.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Energy/EnergyCloudManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Interaction Scripts/Reticle.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Weapons/BaseWeapon.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Entity Scripts/Whales/BaseWhale.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Entity Scripts/Whales/UnlockNode.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Visual/StarTwinkle.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Visual/Pulse.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Loading Scripts/Visual Things/LoadingReticleBootup.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Things/ShootingScreenScript.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Loading Scripts/BufferScreenScript.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Things/BufferScreenScript.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/SkillTierPanel.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/SettingsPanel.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Things/StartScreenScript.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/BackgroundMusicPlayer.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Things/LoadingScreenScript.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/LayeredCamera.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/EquipSkillsPanel.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Interaction/CharacterSelect.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/SkillSelectPanel.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Things/AttractMovie.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Spawning/WhaleSpawnManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/LighthouseGameData.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/HUDManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Sprites/Environment/summer/Jets/ConstantMovement.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Energy/EnergyParticle.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Environment/ShadowScale.cs",
		"/Users/jak/Documents/Unity/52hz/(whales).sublime-project",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/LeanTweenInitializer.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/EnergyCloudManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Game Systems/InputManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Player.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/PlayerDataManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/Skills/SkillDataManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/Gameplay/Skills/SkillManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/_GDC GARBAGE/SceneManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/GUI/SkillGUI.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/Skills/SkillGUI.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/Skills/SkillData.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Scene Scripts/AttractMovie.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/Skills/SkillNPCDataManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/SkillDataManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/SkillNPCDataManager.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/CustomAssetUtility.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/SkillAsset.cs",
		"/Users/jak/Documents/Unity/52hz/Assets/Scripts/Lighthouse Scripts/Systems/Game Data/Skill.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/_GDC GARBAGE/SceneManager.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Game Systems/SceneManager.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Game Systems/InputManager.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Game Systems/LayeredCamera.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Spawning/WhaleSpawnManager.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Jets/CreateObjects.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/BaseWhale.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Weapons/BaseWeapon.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Player.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/EnergyNode.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Environment/ScrollingUVs.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/WhaleNodeLayout.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Weapons/MainWeapon.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Game Systems/HUDManager.cs",
		"/Users/jak/Documents/Unity/(whales)/(whales).sublime-project",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/UnlockNode.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/KillNode.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Entity Scripts/Whales/LockNode.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Interaction Scripts/BlackBar.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Interaction Scripts/Reticle.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Skills/BaseSkill.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Skills/FireRateSkill.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Gameplay/Skills/SkillManager.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Spawning/WhaleSpawnLayer.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Scene Scripts/Spawning/WhaleSpawnPoint.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Spine/spine-unity/SkeletonAnimator.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Spine/spine-unity/SkeletonRenderer.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Scripts/Spine/spine-unity/Editor/SpineEditorUtilities.cs",
		"/Users/jak/Documents/Unity/(whales)/Assets/Garbage.cs",
		"/Users/jak/Library/Application Support/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/Users/jak/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/jak/Documents/Unity/(whales)/(whales).sln"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"hit",
			"_energy",
			"_dismissButton.enabled",
			"isOn",
			");\n",
			"leantween",
			"_isLockedOnTarget",
			"	\n",
			"ISkeletonAnimation",
			"UpdateBonesDelegate"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/Scripts/Puzzle Logic/PuzzleGrid.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7368,
						"regions":
						{
						},
						"selection":
						[
							[
								201,
								201
							]
						],
						"settings":
						{
							"syntax": "Packages/C#/C#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 25.0
	},
	"pinned_build_system": "",
	"project": "VividGrid.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 260.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
